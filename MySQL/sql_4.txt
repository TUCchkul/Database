create database test;
use test;
create table order_data(
    cust_id int,
    order_id int,
    country varchar(50),
    state varchar(50)
);
insert into order_data values(1,100,'USA','Seattle');
insert into order_data values(2,101,'INDIA','UP');
insert into order_data values(2,103,'INDIA','Bihar');
insert into order_data values(4,108,'USA','WDC');
insert into order_data values(5,109,'UK','London');
insert into order_data values(4,110,'USA','WDC');
insert into order_data values(3,120,'INDIA','AP');
insert into order_data values(2,121,'INDIA','Goa');
insert into order_data values(1,131,'USA','Seattle');
insert into order_data values(6,142,'USA','Seattle');
insert into order_data values(7,150,'USA','Seattle');
select * from order_data;
#Use having clause
#write a query to find the country where only 1 order was placed
select country from order_data group by country having count(*)=1;
#write a query to find the country where only 1 order was placed
select country from order_data group by country having count(*)=4;

#where clause and group by clause->What should tbe the proper sequence?
#ans-> Where clause and then Group GROUP BY 

# How to use GROUP_CONCAT
# Query write a query to print distinct states present in the dataset for each country
select country, GROUP_CONCAT(state) as state_in_country from order_data group by country;
select country, group_concat(distinct state) as states_in_country from order_data group by country;
select country, group_concat(distinct state order by state desc) as state_in_country from order_data group by country;
select country, group_concat(distinct state order by state desc separator '<->') as state_country from order_data group by country;

create table employee(
    id int,
    name varchar(50),
    salary int
);
insert into employee values(1,'Shushank', 5000),(2,'Amit', 5500),(3,'Rahul', 7000),(4,'Rohit', 7000),(5,'Nitin', 5000),(6,'kul', 8000);
select * from employee;
select * from employee where salary > (select salary from employee where name='Rohit');
#use of in and not in   
# write a query to print all order which are placed in Seatal and Goa
select * from order_data;
select * from order_data where country_state='Seattle' or country_state='Goa';
#Best answer
select * from order_data where country_state in ('seattle','Goa');
create table if not exists customer_order_data(
    order_id int,
    cust_id int,
    supplier_id int,
    cust_country varchar(50)
);
insert into customer_order_data values(101,200,300,'USA'),(102,201,301,'INDIA'),(103,202,302,'USA'),(104,203,303,'UK');
select * from customer_order_data;
create table if not exists supplier_data(
    supplier_id int,
    sup_country varchar(50)
);
insert into supplier_data values(300,'USA'),(303,'UK');
#write a query to find all customer order data where customer and supplier both living in same country
select * from supplier_data;
create table if not exists student_marks
(
    stu_id int,
    stu_name varchar(50),
    total_marks int
);
insert into student_marks values(1,'Shashank',50);
insert into student_marks values(2,'Rahul',91);
insert into student_marks values(3,'Amit',74);
insert into student_marks values(4,'Nikhil',65);
insert into student_marks values(5,'Rohit',86);
insert into student_marks values(6,'Deepak',77);
select * from student_marks;
#write a query to calculate the grades for a student by a following criteria
# marks >= 90 , grade A+
# marks < 90 and marks >=85, grade A
# marks < 85 and marks >=75, grade B+
# marks < 75 and marks >=60, grade B
# marks < 60 , grade C

select stu_id,
       stu_name,
       total_marks,
       case 
            when total_marks >=90 then 'A+'
            when total_marks >=85 and total_marks<90 then 'A'
            when total_marks >=75 and total_marks <85 then 'B+'
            when total_marks >=60 and total_marks <75 then 'B'
            else 'C'
        end as Grade
from student_marks;
# Uber SQL Interview questions
create table tree
(
    node int,
    parent int
);

insert into tree values (5,8),(9,8),(4,5),(2,9),(1,5),(3,9),(8,null);

select * from tree;

select node,
       CASE
            when node not in (select distinct parent from tree where parent is not null) then 'LEAF'
            when parent is null then 'ROOT'
            else 'INNER'
       END as node_type
from tree;
# Example for Case When with Group By - Amazon SQL Questions
create table transactions
(
    trx_date date,
    merchant_id varchar(10),
    amount int,
    payment_mode varchar(10)
);
