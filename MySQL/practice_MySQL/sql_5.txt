create database test_db;
use test_db;
#Window FUNCTION
create table shop_sales_data(
    sales_data date,
    shop_id varchar(50),
    sales_amount int
);
insert into shop_sales_data values('2022-02-14','S1',200);
insert into shop_sales_data values('2022-02-15','S1',300);
insert into shop_sales_data values('2022-02-14','S2',600);
insert into shop_sales_data values('2022-02-15','S3',500);
insert into shop_sales_data values('2022-02-18','S1',400);
insert into shop_sales_data values('2022-02-17','S1',250);
insert into shop_sales_data values('2022-02-20','S3',300);

select * from shop_sales_data;
select * from shop_sales_data;
# Total count of sales using window functions
select *,
		count(*) over(partition by shop_id) as total_sale_count_by_shops
from shop_sales_data;
select *,
		count(*) over(partition by shop_id order by sales_amount desc) as total_sale_count_by_shops
from shop_sales_data;
#Group by
select shop_id, count(*) as total_sale_count_by_shops from shop_sales_data group by shop_id;
##if we only use in order by in over clause
select *,
		count(*) over(order by sales_amount desc) as total_sales_count_by_shops
from shop_sales_data;
select *,
		sum(sales_amount) over(order by sales_amount desc) as total_sum_of_sales
from shop_sales_data;

#if we use only partition by
select *,
		sum(sales_amount) over(partition by shop_id) as total_sum_sales
from shop_sales_data;
#if we use partition by and order by together
select *,
		sum(sales_amount) over(partition by shop_id order by sales_amount desc) as total_sum_of_sales
from shop_sales_data;
create table amazon_sales_data(
sales_data date,
sales_amount int
);
insert into amazon_sales_data values('2022-08-21',500);
insert into amazon_sales_data values('2022-08-22',600);
insert into amazon_sales_data values('2022-08-19',300);

insert into amazon_sales_data values('2022-08-18',200);

insert into amazon_sales_data values('2022-08-25',800);
select * from amazon_sales_data;

select *,
avg(sales_amount) over(order by sales_data) as rolling_avg,
sum(sales_amount)over(order by sales_data) as rolling_sum from amazon_sales_data;
# row_num(),rank(),dense_rank()
insert into shop_sales_data values('2022-02-19','S1',400);
insert into shop_sales_data values('2022-02-20','S1',400);
insert into shop_sales_data values('2022-02-22','S1',300);
insert into shop_sales_data values('2022-02-25','S1',200);
insert into shop_sales_data values('2022-02-15','S2',600);
insert into shop_sales_data values('2022-02-16','S2',600);
insert into shop_sales_data values('2022-02-16','S3',500);
insert into shop_sales_data values('2022-02-18','S3',500);
insert into shop_sales_data values('2022-02-19','S3',300);
select * from shop_sales_data;
select *,
		row_number() over(partition by shop_id order by sales_amount desc) as row_num,
		rank() over(partition by shop_id order by sales_amount desc) as rank_val,
		dense_rank()over(partition by shop_id order by sales_amount desc) as dense_rank_val
from shop_sales_data;

create table employees(
emp_id int,
salary int,
dept_name varchar(50)
);
insert into employees values(1,1000,'Software'),(2, 11000,'Software'),(3,11000,'Software'),(4,11000,'Software'),(5, 15000,'Finance'),(6,15000, 'Finance'),(7, 15000,'IT'),(8,12000,'HR'),(9,12000,'HR'),(10,11000,'HR');
select * from employees;
delete from employees where emp_id=1;
select 
	tmp.*
		from (select *,
			row_number() over(partition by dept_name order by salary desc) as row_num
			from employees) tmp
	where tmp.row_num=1;
# Query - get all employee from each department who is getting maximum salary
select 
		tmp.*
        from(select *,
        rank()over(partition by dept_name order by salary desc) as rank_num
        from employees)as tmp
        where tmp.rank_num=1;
 # Query - get all top 2 ranked employees from each department who are getting maximum salary
 select
		tmp.*
			from(select *,
							dense_rank()over(partition by dept_name order by salary desc) as dense_rank_num
					from employees) tmp
			where tmp.dense_rank_num<=2;
select 
    tmp.*
from (select *,
        dense_rank() over(partition by dept_name order by salary desc) as dense_rank_num
    from employees) tmp
where tmp.dense_rank_num <= 2;

# Example for lag and lead
create table daily_sales
(
sales_date date,
sales_amount int
);


insert into daily_sales values('2022-03-11',400);
insert into daily_sales values('2022-03-12',500);
insert into daily_sales values('2022-03-13',300);
insert into daily_sales values('2022-03-14',600);
insert into daily_sales values('2022-03-15',500);
insert into daily_sales values('2022-03-16',200);

select * from daily_sales;
select *,
		lag(sales_amount,1)over(order by sales_date) as pre_day_sales
from daily_sales;
#Query - Calculate the differnce of sales with previous day sales
# Here null will be derived
select sales_date,
		sales_amount as curr_day_sales,
        lag(sales_amount,1)over(order by sales_date) as prev_day_sales,
        sales_amount-lag(sales_Amount,1)over(order by sales_date) as sales_diff
from daily_sales;
 # Here we can replace null with 0
 select sales_date,
		sales_amount as curr_day_sales,
        lag(sales_amount,1,0) over(order by sales_date)as prev_day_sales,
        sales_amount-lag(sales_amount,1,0) over(order by sales_date) as sales_diff
from daily_sales;

